local ctr = require "tests.controller"

-- Walls
local bwall = hash("/bwall")
local twall = hash("/twall") 
local hero = hash("/hero")

local vdown = vmath.vector3(0, -1, 0)
local vleft = vmath.vector3(-1, 0, 0)
local vright = vmath.vector3(1, 0, 0)
local vup = vmath.vector3(0, 1, 0)
local normal = vdown

local speed = 766
local velocity = vmath.vector3(0,0,0)

local normal_velocity = vmath.vector3()
local tangent_velocity  = vmath.vector3()
local setposition = go.set_position
local wall_results = {}


local tempPos = vmath.vector3()
local hero_id
local wall_id
local heroSize
local acceleration = vmath.vector3(1,1,0)

local walls ={}
local swidth = tonumber(sys.get_config("display.width"))
local sheight = tonumber(sys.get_config("display.height"))
function init(self)

  msg.post("@system:", "toggle_profile")


  daabbcc.createTree("world", 2, 0, 4)
  daabbcc.createTree("walls", 2, 0, 4)

  --Left Wall: 0
  local _pos = go.get_position(bwall)
  local _sprite =  msg.url("default", bwall, "sprite")
  local _spriteSize = go.get(_sprite, "size")
  wall_id = ctr.addRect("world", _spriteSize, _pos, 0, 0, 0) -- Insert wall
 wall_id = ctr.addRect("walls", _spriteSize, _pos, 0, 0, 0) -- Insert wall

 table.insert( walls, #walls+1, wall_id )

 _pos = go.get_position(twall)
 _sprite =  msg.url("default", twall, "sprite")
 _spriteSize = go.get(_sprite, "size")
  wall_id = ctr.addRect("world", _spriteSize, _pos, 0, 0, 0) -- Insert wall
  wall_id = ctr.addRect("walls", _spriteSize, _pos, 0, 0, 0) -- Insert wall

  table.insert( walls, #walls+1, wall_id )
  

  --local x,y,w,h = daabbcc.getAABB("world", wall_id)
  --print( x,y,w,h )

  _pos = go.get_position(hero)
  _sprite =  msg.url("default", hero, "sprite")
  heroSize = go.get(_sprite, "size")
   hero_id = ctr.addRect("world", _spriteSize, _pos, 0, 0, 0) -- Insert wall

   local x,y,w,h = daabbcc.getAABB("world", hero_id)
   print( x,y,w,h )

  -- checkSweptCollision(tree_name,_hero_id, _wall_id, hero_velocity.x, _wall_id, hero_velocity.y , normalx, normaly )
   --loat SweptAABB(AABB box1, AABB box2, vector<float> vel1, float& normalx, float& normaly)
   local hero_velocity = vmath.vector3(0.25, -0.25,0.25)

   --local test = daabbcc.checkSweptCollision("world", _hero_id, _wall_id,hero_velocity.x,hero_velocity.y,0.0, 0.0)



   velocity.x = 0
   velocity.y = -speed

   tempPos = _pos
   pprint(velocity)
   pprint(walls)
 end


 local function checkCollision(dt, _id)


 end


 function update(self, dt)

  daabbcc.updateRect("world",hero_id,tempPos.x, tempPos.y,heroSize.x, heroSize.y )
  local tvel = velocity*dt


  wall_results= daabbcc.queryAABB("world",tempPos.x,tempPos.y,heroSize.x+30,heroSize.y+30)

  if wall_results[2] ~= nil then

    pprint(wall_results)
    local w_id  =  wall_results[2]
    local collisionTime, _nx, _ny = daabbcc.checkSweptCollision("world", hero_id, w_id, tvel.x, tvel.y, normal.x, normal.y)
    normal.x = _nx
    normal.y = _ny
    local remainingTime = 1.0 - collisionTime;

    if (remainingTime >= 0.0) then

      if  math.abs( normal.x ) > 0.0001 then

     velocity.x = velocity.x * -1
     end

     if  math.abs( normal.y ) > 0.0001 then

    velocity.y = velocity.y * -1
    end

    local _dt = collisionTime*dt
    --velocity = velocity +  acceleration * _dt;
    tempPos = tempPos+ (velocity * _dt);

  

    _dt = remainingTime*dt

  

  else 
    --velocity = velocity  * dt;
    tempPos = tempPos+ (velocity * dt);
    

  end

else 
  tempPos = tempPos+ (velocity * dt);

 

end 

 go.set_position(tempPos, hero)


end


