local balls_group = 0
local balls = {}
local current_ball = nil
local ground_result = {}

local v_down = vmath.vector3(0, -1, 0)
local v_left = vmath.vector3(-1, 0, 0)
local v_right = vmath.vector3(1, 0, 0)
local v_up = vmath.vector3(0, 1, 0)
local normal = vdown
local normal_velocity = vmath.vector3()
local tangent_velocity = vmath.vector3()

local ground = {
    id = hash("/ground"),
    pos = vmath.vector3(),
    size = vmath.vector3()
}

local function add_ball(ball_pos)
    local speed = 50
    local pos = vmath.vector3(ball_pos.x, ball_pos.y, 0)
    local ball = factory.create("/factory#ball", pos)
    local sprite = msg.url(nil, ball, "sprite")
    local size = go.get(sprite, "size")
    local velocity = vmath.vector3()
    velocity.x = 0
    velocity.y = -(math.random(5, 10)) * speed

    local ball_proxy_id = aabb.insert(balls_group, pos.x, pos.y, size.x, size.y)

    local t = {
        pos = pos,
        id = ball,
        sprite = sprite,
        size = size,
        proxy_id = ball_proxy_id,
        velocity = velocity,
        speed = speed
    }

    table.insert(balls, t)
end

function init(self)
    msg.post(".", "acquire_input_focus")

    balls_group = aabb.new_group()

    -- Ground
    ground.pos = go.get_position(ground.id)
    local sprite = msg.url(nil, ground.id, "sprite")
    ground.size = go.get(sprite, "size")

    pprint(ground)
end

function update(self, dt)
    ground_result = aabb.query(balls_group, ground.pos.x, ground.pos.y, ground.size.x, ground.size.y)

    if #ground_result > 0 then
        for i = 1, #balls do
            if balls[i].proxy_id == ground_result[1] then
                pprint(balls[i])
                normal = v_up
                normal_velocity = vmath.dot(normal, balls[i].velocity) * normal

                normal_velocity = normal_velocity * -1
                balls[i].velocity = normal_velocity
            end
        end
    end

    for i = 1, #balls do
        current_ball = balls[i]
        current_ball.pos = current_ball.pos + current_ball.velocity * dt

        go.set_position(current_ball.pos, current_ball.id)
        aabb.update(
            balls_group,
            current_ball.proxy_id,
            current_ball.pos.x,
            current_ball.pos.y,
            current_ball.size.x,
            current_ball.size.y
        )
    end
end

function on_input(self, action_id, action)
    if action_id == hash("touch") and action.pressed then
        local ball_pos = vmath.vector3(action.x, action.y, 0)
        add_ball(ball_pos)
    end
end

function on_reload(self)
    -- Add reload-handling code here
    -- Remove this function if not needed
end
