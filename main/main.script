local ctr = require "main.controller"

local _id = 0
local _height = 0
local _nodeCount = 0
local viewport= hash("/viewport")
local  particlecount = 3

local v_x
local v_y
local v_w
local v_h

local bounds = vmath.vector3(640,360,0)


local prt = {
  {
    sprite= hash("20x20_circle"),
    type = 0,
    size = vmath.vector3(20,20,0)
  },
  {
    sprite= hash("30x30_circle"),
    type = 0,
    size =vmath.vector3(30,30,0)
  },
  {
    sprite= hash("40x40_rect"),
    type = 1,
    size = vmath.vector3(40,40,0)
  },
  {
    sprite= hash("60x30_rect"),
    type = 1,
    size = vmath.vector3(60,30,0)
  }
}
local function insetParticles ()
  local _particleId
  local pos = vmath.vector3( math.random (0, 640),  math.random (0, 360), 0)

  local _targetId =  factory.create("/factory#particle",pos)
  local _sprite = msg.url("main", _targetId, "sprite")
  local _label = msg.url("main", _targetId, "label")
  local rnd =math.random (1,4)
  local rndSprite = prt[rnd]["sprite"]
  local rndType = prt[rnd]["type"]
  local spriteSize = prt[rnd]["size"]
  msg.post(_sprite, "play_animation", {id = rndSprite})

  if rndType == 0 then
    _particleId = ctr.addCircle("particles", spriteSize,pos, _targetId,_sprite,rndType)
  else
    _particleId =   ctr.addRect("particles", spriteSize, pos, _targetId,_sprite,rndType)
  end

  label.set_text(_label, (_particleId .. " / " .. pos.x .. " - " .. pos.y) )
end

local function setNewAnimate(self, url, property) 
  local _to = vmath.vector3()
  _to.x =  math.random (0, bounds.x)
  _to.y = math.random (0, bounds.y)
  _to.z = 0
  go.animate(url, "position",  go.PLAYBACK_ONCE_FORWARD, _to, go.EASING_LINEAR, 2,0,setNewAnimate)

end 
local function setAnimate() 

  for i=0,(particlecount-1) do
    local _to = vmath.vector3()
    _to.x =  math.random (0, bounds.x)
    _to.y = math.random (0, bounds.y)
    _to.z = 0
    go.animate(ctr.particleGroup[i][2], "position",  go.PLAYBACK_ONCE_FORWARD, _to, go.EASING_LINEAR, 2,0,setNewAnimate)
  end
end 


function init(self)

  daabbcc.createTree("particles", 2, 0.1, 100)


  local viewport_sprite = msg.url("main", viewport, "sprite")
  local viewport_size = go.get(viewport_sprite, "size")
  local viewport_pos = go.get_position(viewport)


  math.randomseed(os.time())
  for i=1,particlecount do
    insetParticles ()
  end

  --pprint(ctr.particleGroup)
  pprint(ctr.particleGroup)
  print("-------------------")
  pprint("viewport_pos: ".. viewport_pos)
  pprint("viewport_size: ".. viewport_size)
  v_x = viewport_pos.x
  v_y = viewport_pos.y
  v_w = viewport_size.x
  v_h = viewport_size.y
  --[[
  xl = x-(w/2)
  yb = y-(h/2)
  xr = x+(w/2)
  yt = y+(h/2)
  
  print("xl: " , xl)
  print("yb: " , yb)
  print("xr: " , xr)
  print("yt: " , yt)
  ]]--
  local _result = daabbcc.queryAABB("particles",v_x,v_y,v_w,v_h)
  pprint(_result)
  setAnimate() 
end


function update(self, dt)
  for i=0,(particlecount-1) do
    local pp = ctr.particleGroup[i]
    local tpos = go.get_position(pp[2]) 
    if pp[5]== 0 then      
      ctr.updateCircle("particles",pp[6], tpos, pp[1])
    else
      ctr.updateRect("particles",pp[6], tpos, pp[1])
    end 
  end
  local _result = daabbcc.queryAABB("particles",v_x,v_y,v_w,v_h)
  pprint(_result)
end

function on_message(self, message_id, message, sender)
  -- Add message-handling code here
  -- Remove this function if not needed
end

function on_input(self, action_id, action)
  -- Add input-handling code here
  -- Remove this function if not needed
end

function on_reload(self)
  -- Add reload-handling code here
  -- Remove this function if not needed
end
