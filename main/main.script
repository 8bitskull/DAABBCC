local ctr = require "main.controller"

local _id = 0
local _height = 0
local _nodeCount = 0
local viewport= hash("/viewport")
local  particlecount = 19

local prt = {
  {
    sprite= hash("20x20_circle"),
    type = 0,
    size = vmath.vector3(20,20,0)
  },
  {
    sprite= hash("30x30_circle"),
    type = 0,
    size =vmath.vector3(30,30,0)
  },
  {
    sprite= hash("40x40_rect"),
    type = 1,
    size = vmath.vector3(40,40,0)
  },
  {
    sprite= hash("60x30_rect"),
    type = 1,
    size = vmath.vector3(60,30,0)
  }
}
local function insetParticles ()
  local _particleId
  local pos = vmath.vector3( math.random (0, 640),  math.random (0, 360), 0)

  local _targetId =  factory.create("/factory#particle",pos)
  local _sprite = msg.url("main", _targetId, "sprite")
  local _label = msg.url("main", _targetId, "label")
  local rnd =math.random (1,4)
  local rndSprite = prt[rnd]["sprite"]
  local rndType = prt[rnd]["type"]
  local spriteSize = prt[rnd]["size"]
  msg.post(_sprite, "play_animation", {id = rndSprite})

  pprint("pos: ".. pos)
  pprint("spriteSize: ".. spriteSize)

  if rndType == 0 then
    _particleId = ctr.addCircle("particles", spriteSize,pos, _targetId)
  else
    _particleId =   ctr.addRect("particles", spriteSize, pos, _targetId)
  end

  label.set_text(_label, (_particleId .. " / " .. pos.x .. " - " .. pos.y) )
  print(rndSprite)
end

function init(self)

  daabbcc.createTree("particles", 2, 0.1, 20)


  local viewport_sprite = msg.url("main", viewport, "sprite")
  local viewport_size = go.get(viewport_sprite, "size")
  local viewport_pos = go.get_position(viewport)


  math.randomseed(os.time())
  for i=1,particlecount do
    insetParticles ()
  end

  --pprint(ctr.particleGroup)
  print("-------------------")
  pprint("viewport_pos: ".. viewport_pos)
  pprint("viewport_size: ".. viewport_size)
  local x = viewport_pos.x
  local y = viewport_pos.y
  local w = viewport_size.x
  local h = viewport_size.y

  local xl = x-(w/2)
  local yb = y-(h/2)
  local xr = x+(w/2)
  local yt = y+(h/2)
  print("xl: " , xl)
  print("yb: " , yb)
  print("xr: " , xr)
  print("yt: " , yt)
  local _result = daabbcc.queryAABB("particles",x,y,w,h)
  pprint(_result)

end

function final(self)
  -- Add finalization code here
  -- Remove this function if not needed
end

function update(self, dt)
  -- Add update code here
  -- Remove this function if not needed
end

function on_message(self, message_id, message, sender)
  -- Add message-handling code here
  -- Remove this function if not needed
end

function on_input(self, action_id, action)
  -- Add input-handling code here
  -- Remove this function if not needed
end

function on_reload(self)
  -- Add reload-handling code here
  -- Remove this function if not needed
end
